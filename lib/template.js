var Envelope = require('./envelope');

function Template (client, id) {
    this.client = client;
    this.id = id;
}

/**
 * Sends a signing request for a template to the recipients,
 * using the given email subject.
 * @return {Signer}
 */
Template.prototype.sign = function () {
    return new Signer(this.client, this);
};

/**
 * The Signer is a utility class to generate a request to send
 * a template.
 * @param {Client} client
 * @param {Template} template
 */
function Signer (client, template) {
    this.client = client;
    this.req = { templateRoles: [], templateId: template.id };
}

/**
 * Specifies the template recipients. Each roleName in the template
 * must have a recipient assigned to it. This is made up elements:
 *   • email – The recipient’s email address.
 *   • name – The recipient’s name.
 *   • roleName – The template roleName associated with the recipient.
 *   • clientUserId – Optional, this specifies if the recipient is
 *     embedded or remote. If the clientUserId is not null then the
 *     recipient is embedded. Note that if a ClientUserId is used
 *     and the account settings SignerMustHaveAccount or
 *     SignerMustLoginToSign are true, an error is generated
 *     on sending.
 *   • defaultRecipient – Optional, when set to true, this recipient
 *     is the default recipient and any tabs generated by the
 *     transformPdfFields option are mapped to this recipient.
 *   • routingOrder – This specifies the routing order of the
 *     recipient in the envelope.
 *   • accessCode – This optional element specifies the access code
 *     a recipient has to enter to validate the identity. This can
 *     be a maximum of 50 characters.
 *   • inPersonSignerName – Optional, if the template role is an in
 *     person signer, this is the full legal name of the signer.
 *     This can be a maximum of 100 characters.
 *   • emailNotification – This is an optional complex element that
 *     has a role specific emailSubject, emailBody, and language.
 *     It follows the same format as the emailNotification node
 *     for Recipients.
 *   • tabs – This allows the tab values to be specified for matching
 *     to tabs in the template.
 * @param  {Object|Object[]} recipient
 * @return {Signer}
 */
Signer.prototype.to = function (recipient) {
    if (!Array.isArray(recipient)) {
        recipient = [recipient];
    }

    this.req.templateRoles = this.req.templateRoles.concat(recipient);
    return this;
};

/**
 * The subject of the email that will be sent to all recipients.
 * @param  {String} subject
 * @return {Signer}
 */
Signer.prototype.subject = function (subject) {
    this.req.emailSubject = subject;
    return this;
};

/**
 * Sends the built request to the Docusign API.
 */
Signer.prototype.baseRequest = function () {
    return this.client.request({
        body: this.req,
        url: '/envelopes',
        method: 'post'
    }).bind(this).then(function (response) {
        return new Envelope(this.client, response.body.envelopeId).getDetails();
    });
};

/**
 * Sends out the envelope to all recipients.
 * @return {Promise}
 */
Signer.prototype.send = function () {
    this.req.status = 'sent';
    return this.baseRequest();
};

/**
 * Saves the envelope for later usage.
 * @return {Promise}
 */
Signer.prototype.save = function () {
    this.req.status = 'created';
    return this.baseRequest();
};

module.exports = Template;
